// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

// struct Vec3, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Vec3 {
  x_: f32,
  y_: f32,
  z_: f32,
} // pub struct Vec3
impl flatbuffers::SafeSliceAccess for Vec3 {}
impl<'a> flatbuffers::Follow<'a> for Vec3 {
  type Inner = &'a Vec3;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec3>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec3 {
  type Inner = &'a Vec3;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec3>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec3 {
    type Output = Vec3;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Vec3 as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Vec3 {
    type Output = Vec3;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Vec3 as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl Vec3 {
  pub fn new<'a>(_x: f32, _y: f32, _z: f32) -> Self {
    Vec3 {
      x_: _x.to_little_endian(),
      y_: _y.to_little_endian(),
      z_: _z.to_little_endian(),

    }
  }
  pub fn x<'a>(&'a self) -> f32 {
    self.x_.from_little_endian()
  }
  pub fn y<'a>(&'a self) -> f32 {
    self.y_.from_little_endian()
  }
  pub fn z<'a>(&'a self) -> f32 {
    self.z_.from_little_endian()
  }
}

pub enum InputBufferOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct InputBuffer<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for InputBuffer<'a> {
    type Inner = InputBuffer<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> InputBuffer<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        InputBuffer {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args InputBufferArgs<'args>) -> flatbuffers::WIPOffset<InputBuffer<'bldr>> {
      let mut builder = InputBufferBuilder::new(_fbb);
      if let Some(x) = args.mouse_delta { builder.add_mouse_delta(x); }
      if let Some(x) = args.keeb_buf { builder.add_keeb_buf(x); }
      builder.finish()
    }

    pub const VT_KEEB_BUF: flatbuffers::VOffsetT = 4;
    pub const VT_MOUSE_DELTA: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn keeb_buf(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(InputBuffer::VT_KEEB_BUF, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn mouse_delta(&self) -> Option<&'a Vec3> {
    self._tab.get::<Vec3>(InputBuffer::VT_MOUSE_DELTA, None)
  }
}

pub struct InputBufferArgs<'a> {
    pub keeb_buf: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub mouse_delta: Option<&'a  Vec3>,
}
impl<'a> Default for InputBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        InputBufferArgs {
            keeb_buf: None,
            mouse_delta: None,
        }
    }
}
pub struct InputBufferBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> InputBufferBuilder<'a, 'b> {
  #[inline]
  pub fn add_keeb_buf(&mut self, keeb_buf: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(InputBuffer::VT_KEEB_BUF, keeb_buf);
  }
  #[inline]
  pub fn add_mouse_delta(&mut self, mouse_delta: &'b  Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(InputBuffer::VT_MOUSE_DELTA, mouse_delta);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> InputBufferBuilder<'a, 'b> {
    let start = _fbb.start_table();
    InputBufferBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<InputBuffer<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ReliableMessageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ReliableMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ReliableMessage<'a> {
    type Inner = ReliableMessage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ReliableMessage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ReliableMessage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ReliableMessageArgs<'args>) -> flatbuffers::WIPOffset<ReliableMessage<'bldr>> {
      let mut builder = ReliableMessageBuilder::new(_fbb);
      if let Some(x) = args.data { builder.add_data(x); }
      builder.add_type_(args.type_);
      builder.add_id(args.id);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_TYPE_: flatbuffers::VOffsetT = 6;
    pub const VT_DATA: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn id(&self) -> u32 {
    self._tab.get::<u32>(ReliableMessage::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn type_(&self) -> u32 {
    self._tab.get::<u32>(ReliableMessage::VT_TYPE_, Some(0)).unwrap()
  }
  #[inline]
  pub fn data(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(ReliableMessage::VT_DATA, None).map(|v| v.safe_slice())
  }
}

pub struct ReliableMessageArgs<'a> {
    pub id: u32,
    pub type_: u32,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
}
impl<'a> Default for ReliableMessageArgs<'a> {
    #[inline]
    fn default() -> Self {
        ReliableMessageArgs {
            id: 0,
            type_: 0,
            data: None,
        }
    }
}
pub struct ReliableMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ReliableMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(ReliableMessage::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: u32) {
    self.fbb_.push_slot::<u32>(ReliableMessage::VT_TYPE_, type_, 0);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ReliableMessage::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ReliableMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ReliableMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ReliableMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ClientPacketOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ClientPacket<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientPacket<'a> {
    type Inner = ClientPacket<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ClientPacket<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ClientPacket {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ClientPacketArgs<'args>) -> flatbuffers::WIPOffset<ClientPacket<'bldr>> {
      let mut builder = ClientPacketBuilder::new(_fbb);
      if let Some(x) = args.unreliable { builder.add_unreliable(x); }
      if let Some(x) = args.reliable { builder.add_reliable(x); }
      builder.finish()
    }

    pub const VT_RELIABLE: flatbuffers::VOffsetT = 4;
    pub const VT_UNRELIABLE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn reliable(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ReliableMessage<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<ReliableMessage<'a>>>>>(ClientPacket::VT_RELIABLE, None)
  }
  #[inline]
  pub fn unreliable(&self) -> Option<InputBuffer<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<InputBuffer<'a>>>(ClientPacket::VT_UNRELIABLE, None)
  }
}

pub struct ClientPacketArgs<'a> {
    pub reliable: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<ReliableMessage<'a >>>>>,
    pub unreliable: Option<flatbuffers::WIPOffset<InputBuffer<'a >>>,
}
impl<'a> Default for ClientPacketArgs<'a> {
    #[inline]
    fn default() -> Self {
        ClientPacketArgs {
            reliable: None,
            unreliable: None,
        }
    }
}
pub struct ClientPacketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClientPacketBuilder<'a, 'b> {
  #[inline]
  pub fn add_reliable(&mut self, reliable: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ReliableMessage<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ClientPacket::VT_RELIABLE, reliable);
  }
  #[inline]
  pub fn add_unreliable(&mut self, unreliable: flatbuffers::WIPOffset<InputBuffer<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<InputBuffer>>(ClientPacket::VT_UNRELIABLE, unreliable);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClientPacketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClientPacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClientPacket<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

